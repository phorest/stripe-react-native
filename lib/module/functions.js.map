{"version":3,"sources":["functions.ts"],"names":["APPLE_PAY_NOT_SUPPORTED_MESSAGE","createPaymentMethod","data","options","NativeStripeSdk","paymentMethod","error","createToken","params","token","retrievePaymentIntent","clientSecret","paymentIntent","retrieveSetupIntent","setupIntent","confirmPaymentMethod","paymentIntentClientSecret","isApplePaySupported","isiOS","presentApplePay","code","ApplePayError","Canceled","message","updateApplePaySummaryItems","summaryItems","errorAddressFields","confirmApplePayPayment","handleCardAction","confirmSetupIntent","createTokenForCVCUpdate","cvc","tokenId","handleURLCallback","url","stripeHandled","initPaymentSheet","paymentOption","presentPaymentSheet","confirmPaymentSheetPayment"],"mappings":"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","sourcesContent":["import { createError, isiOS } from './helpers';\nimport NativeStripeSdk from './NativeStripeSdk';\nimport {\n  ApplePay,\n  ApplePayError,\n  ApplePayResult,\n  ConfirmPaymentMethodResult,\n  ConfirmPaymentSheetPaymentResult,\n  ConfirmSetupIntent,\n  ConfirmSetupIntentResult,\n  CreatePaymentMethodResult,\n  CreateTokenForCVCUpdateResult,\n  CreateTokenResult,\n  HandleCardActionResult,\n  InitPaymentSheetResult,\n  PaymentMethodCreateParams,\n  PaymentSheet,\n  PresentPaymentSheetResult,\n  RetrievePaymentIntentResult,\n  RetrieveSetupIntentResult,\n  StripeError,\n} from './types';\nimport type { Card } from './types/Card';\n\nconst APPLE_PAY_NOT_SUPPORTED_MESSAGE =\n  'Apple pay is not supported on this device';\n\nexport const createPaymentMethod = async (\n  data: PaymentMethodCreateParams.Params,\n  options: PaymentMethodCreateParams.Options = {}\n): Promise<CreatePaymentMethodResult> => {\n  try {\n    const { paymentMethod, error } = await NativeStripeSdk.createPaymentMethod(\n      data,\n      options\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentMethod: paymentMethod!,\n    };\n  } catch (error) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const createToken = async (\n  params: Card.CreateTokenParams\n): Promise<CreateTokenResult> => {\n  try {\n    const token = await NativeStripeSdk.createToken(params);\n    return {\n      token,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const retrievePaymentIntent = async (\n  clientSecret: string\n): Promise<RetrievePaymentIntentResult> => {\n  try {\n    const {\n      paymentIntent,\n      error,\n    } = await NativeStripeSdk.retrievePaymentIntent(clientSecret);\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentIntent: paymentIntent!,\n    };\n  } catch (error) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const retrieveSetupIntent = async (\n  clientSecret: string\n): Promise<RetrieveSetupIntentResult> => {\n  try {\n    const { setupIntent, error } = await NativeStripeSdk.retrieveSetupIntent(\n      clientSecret\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      setupIntent: setupIntent!,\n    };\n  } catch (error) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const confirmPaymentMethod = async (\n  paymentIntentClientSecret: string,\n  data: PaymentMethodCreateParams.Params,\n  options: PaymentMethodCreateParams.Options = {}\n): Promise<ConfirmPaymentMethodResult> => {\n  try {\n    const { paymentIntent, error } = await NativeStripeSdk.confirmPaymentMethod(\n      paymentIntentClientSecret,\n      data,\n      options\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentIntent: paymentIntent!,\n    };\n  } catch (error) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const isApplePaySupported = async (): Promise<boolean> => {\n  return isiOS && (await NativeStripeSdk.isApplePaySupported());\n};\n\nexport const presentApplePay = async (\n  params: ApplePay.PresentParams\n): Promise<ApplePayResult> => {\n  if (!(await NativeStripeSdk.isApplePaySupported())) {\n    return {\n      error: createError({\n        code: ApplePayError.Canceled,\n        message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n      }),\n    };\n  }\n\n  try {\n    const { paymentMethod, error } = await NativeStripeSdk.presentApplePay(\n      params\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return { paymentMethod: paymentMethod! };\n  } catch (error) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const updateApplePaySummaryItems = async (\n  summaryItems: ApplePay.CartSummaryItem[],\n  errorAddressFields: Array<{\n    field: ApplePay.AddressFields;\n    message?: string;\n  }> = []\n): Promise<{ error?: StripeError<ApplePayError> }> => {\n  if (!(await NativeStripeSdk.isApplePaySupported())) {\n    return {\n      error: createError({\n        code: ApplePayError.Canceled,\n        message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n      }),\n    };\n  }\n\n  try {\n    await NativeStripeSdk.updateApplePaySummaryItems(\n      summaryItems,\n      errorAddressFields\n    );\n\n    return {};\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const confirmApplePayPayment = async (\n  clientSecret: string\n): Promise<{ error?: StripeError<ApplePayError> }> => {\n  if (!(await NativeStripeSdk.isApplePaySupported())) {\n    return {\n      error: createError({\n        code: ApplePayError.Canceled,\n        message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n      }),\n    };\n  }\n  try {\n    await NativeStripeSdk.confirmApplePayPayment(clientSecret);\n    return {};\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const handleCardAction = async (\n  paymentIntentClientSecret: string\n): Promise<HandleCardActionResult> => {\n  try {\n    const { paymentIntent, error } = await NativeStripeSdk.handleCardAction(\n      paymentIntentClientSecret\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentIntent: paymentIntent!,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const confirmSetupIntent = async (\n  paymentIntentClientSecret: string,\n  data: ConfirmSetupIntent.Params,\n  options: ConfirmSetupIntent.Options = {}\n): Promise<ConfirmSetupIntentResult> => {\n  try {\n    const { setupIntent, error } = await NativeStripeSdk.confirmSetupIntent(\n      paymentIntentClientSecret,\n      data,\n      options\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      setupIntent: setupIntent!,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const createTokenForCVCUpdate = async (\n  cvc: string\n): Promise<CreateTokenForCVCUpdateResult> => {\n  try {\n    const { tokenId, error } = await NativeStripeSdk.createTokenForCVCUpdate(\n      cvc\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      tokenId: tokenId!,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const handleURLCallback = async (url: string): Promise<boolean> => {\n  const stripeHandled = await NativeStripeSdk.handleURLCallback(url);\n  return stripeHandled;\n};\n\nexport const initPaymentSheet = async (\n  params: PaymentSheet.SetupParams\n): Promise<InitPaymentSheetResult> => {\n  try {\n    const { paymentOption, error } = await NativeStripeSdk.initPaymentSheet(\n      params\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentOption,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const presentPaymentSheet = async (\n  params?: PaymentSheet.PresentParams\n): Promise<PresentPaymentSheetResult> => {\n  try {\n    const { paymentOption, error } = await NativeStripeSdk.presentPaymentSheet(\n      params\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentOption: paymentOption,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const confirmPaymentSheetPayment = async (): Promise<ConfirmPaymentSheetPaymentResult> => {\n  try {\n    const { error } = await NativeStripeSdk.confirmPaymentSheetPayment();\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {};\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n"]}